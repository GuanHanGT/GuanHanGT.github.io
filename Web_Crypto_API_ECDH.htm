<!DOCTYPE html>
<html lang="en" data-cf-welcome-bar-visibility="visible">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">

    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description"
        content="Web Crypto API ECDH generateKey/deriveBits and perform AES encryption and decryption, jwk format ecdh ">
    <meta name="keywords"
        content="Web Crypto API ecdh named curved generate keys sign verify the message,  ecdh generate keys, ecdh keys export to jwk, web crypto deriveKeys ,web crypto live tutorial, windo.crypto javascript examples, Web Cryptography API">
    <meta name="language" content="en">
    <title>Web Crypto API ECDH generateKey/deriveBits and perform AES encryption and decryption</title>
    <script src="./Web_Crypto_API_ECDH_files/bootstrap.bundle.min.js"></script>
    <script src="./MakeCredential Example_files/cbor.js"></script>
    <script src="./MakeCredential Example_files/helpers.js"></script>
    <link href="./Web_Crypto_API_ECDH_files/bootstrap.min.css" rel="stylesheet">

    <script type="text/javascript">
        var privateKey;
        var publicKey;
        var externalECPublicKey;

        var bEx_ecX;
        var bEx_ecY;

        var iv = new Uint8Array(16);
        console.log("iv .... ", iv)



        function asciiToUint8Array(str) {
            var chars = [];
            for (var i = 0; i < str.length; ++i)
                chars.push(str.charCodeAt(i));
            return new Uint8Array(chars);
        }

        function ECDH_DeriveKey_DeriveBits() {

            var cryptoObj = window.crypto || window.msCrypto;

            if (!cryptoObj) {
                alert("Crypto API is not supported by the Browser");
                return;
            }

            var plainText = document.getElementById("plainText").value;
            var curve = document.getElementById("curve").value;




            var externalECPublicKeyX = base64EncodeURL(bEx_ecX);
            var externalECPublicKeyY = base64EncodeURL(bEx_ecY);
            console.log("externalECPublicKeyX ", externalECPublicKeyX);
            console.log("externalECPublicKeyY", externalECPublicKeyY);


            window.crypto.subtle.importKey(
                    "jwk", //can be "jwk" (public or private), "raw" (public only), "spki" (public only), or "pkcs8" (private only)
                    { //this is an example jwk key, other key types are Uint8Array objects
                        kty: "EC",
                        crv: "P-256",
                        x: externalECPublicKeyX,
                        y: externalECPublicKeyY,
                        ext: true,
                    }, { //these are the algorithm options
                        name: "ECDH",
                        namedCurve: "P-256", //can be "P-256", "P-384", or "P-521"
                    },
                    true, //whether the key is extractable (i.e. can be used in exportKey)
                    [] //"deriveKey" and/or "deriveBits" for private keys only (just put an empty list if importing a public key)
                )
                .then(function (external_public) {
                    //returns a privateKey (or publicKey if you are importing a public key)
                    externalECPublicKey = external_public;
                    console.log("external_public", external_public);
                })
                .catch(function (err) {
                    console.error(err);
                });



            window.crypto.subtle.generateKey({
                        name: "ECDH",
                        namedCurve: curve, //can be "P-256", "P-384", or "P-521"
                    },
                    true, //whether the key is extractable (i.e. can be used in exportKey)
                    ["deriveKey", "deriveBits"] //can be any combination of "deriveKey" and "deriveBits"
                )
                .then(function (key) {

                    publicKey = key.publicKey;
                    privateKey = key.privateKey;


                     //Ã¥                  For Demo Purpos Only Exported in JWK format
                    window.crypto.subtle.exportKey("jwk", externalECPublicKey).then(
                        function(keydata) {
                            publicKeyhold = keydata;
                            publicKeyJson = JSON.stringify(publicKeyhold);
                            document.getElementById("ecdhpublic").value = publicKeyJson;
                        }
                    );


                    window.crypto.subtle.exportKey("jwk", key.privateKey).then(
                        function (keydata) {
                            privateKeyhold = keydata;

                            privateKeyJson = JSON.stringify(privateKeyhold);
                            document.getElementById("ecdhprivate").value = privateKeyJson;
                        }
                    );

                    window.crypto.subtle.deriveKey({
                                name: "ECDH",
                                namedCurve: curve, //can be "P-256", "P-384", or "P-521"
                                public: externalECPublicKey, //an ECDH public key from generateKey or importKey
                                //public: publicKey //an ECDH public key from generateKey or importKey
                            },
                            privateKey, //your ECDH private key from generateKey or importKey
                            { //the key type you want to create based on the derived bits
                                name: "AES-CBC", //can be any AES algorithm ("AES-CTR", "AES-CBC", "AES-CMAC", "AES-GCM", "AES-CFB", "AES-KW", "ECDH", "DH", or "HMAC")
                                 //the generateKey parameters for that type of algorithm
                                 length: 256, //can be  128, 192, or 256
                            },
                            
                            true, //whether the derived key is extractable (i.e. can be used in exportKey)
                            ["encrypt", "decrypt"] //limited to the options in that algorithm's importKey
                        )
                        .then(function (keydata) {
                            //returns the exported key data

                            // For Demo Purpos Only Exported in JWK format
                            window.crypto.subtle.exportKey("jwk", keydata).then(
                                function (keydata) {
                                    dKey = keydata;
                                    document.getElementById("deriveKeyUsage").value = JSON.stringify(dKey)
                                }
                            );
                        })
                        .catch(function (err) {
                            console.error(err);
                        });

                    window.crypto.subtle.deriveBits({
                                name: "ECDH",
                                namedCurve: curve, //can be "P-256", "P-384", or "P-521"
                                public: externalECPublicKey, //an ECDH public key from generateKey or importKey
                                //public: publicKey
                            },
                            privateKey, //from generateKey or importKey above
                            256 //the number of bits you want to derive
                        )
                        .then(function (bits) {
                            //returns an ArrayBuffer containing the signature
                            document.getElementById("cipherText").value = bytesToHexString(bits);
                            const encoder = new TextEncoder();
                            const data = encoder.encode(plainText);
                            console.log("bits", bufToHex(bits));
                            console.log("new bits",   new Uint8Array(bits));
                            return crypto.subtle.digest(
                            "SHA-256",
                            new Uint8Array(bits)
                            );

                        }) .then(function (digestBytes){
                            document.getElementById("pinKeyIdemPlus").value = bytesToHexString(digestBytes);

                        }).catch(function (err) {
                            console.error(err);
                        });


                })
                .catch(function (err) {
                    console.error(err);
                });
        }


        function ECDH_AES_CTR_Encrypt() {

            var cryptoObj = window.crypto || window.msCrypto;

            if (!cryptoObj) {
                alert("Crypto API is not supported by the Browser");
                return;
            }

            var plainText = document.getElementById("plainText").value;
            var deriveKeyUsage = document.getElementById("deriveKeyUsage").value;

            if (!publicKey) {
                alert("Generate ECDH Key First");
                return;
            }
            const encoder = new TextEncoder();
            const data = encoder.encode(plainText);
            var digestBuffer = [];
            crypto.subtle.digest(
                "SHA-256",
                data
            ).then(function (digestBytes){
                digestBuffer = new Uint8Array(digestBytes);
                console.log("digest", bufToHex(digestBytes));
                console.log("digestBuffer", bufToHex(digestBuffer));
                document.getElementById("sha256Text").value = bufToHex(digestBytes);
                console.log(digestBytes.slice(0,16));
                document.getElementById("sha256Left16Text").value = bufToHex(digestBytes).substr( 0 , 32 ); 
               
                obj = JSON.parse(deriveKeyUsage);
                alg1 = obj.alg;
                ext1 = obj.ext;
                k1 = obj.k;
                kty1 = obj.kty;
                console.log(" digestBytes.slice(0,16)", digestBytes.slice(0,16));
                
                return crypto.subtle.importKey("jwk", {
                    alg: alg1,
                    ext: ext1,
                    k: k1,
                    kty: kty1
                }, "aes-cbc", false, ["encrypt"]);
                
            }).then(function (key) {
                    return crypto.subtle.encrypt({
                        name: "aes-cbc",
                        iv
                    }, key, digestBuffer.slice(0,16));
        
            }, failAndLog).then(function (cipherText) {
                    console.log(" CipherText", cipherText);
                    document.getElementById("cipherTextGCM").value = bytesToHexString(cipherText.slice(0,16));
               
            }, failAndLog).catch(function (err) {
                    console.error(err);
                    
            });


 

           
        }


        function ECDH_AES_CTR_Decrypt() {

            var cryptoObj = window.crypto || window.msCrypto;

            if (!cryptoObj) {
                alert("Crypto API is not supported by the Browser");
                return;
            }

            var plainText = document.getElementById("cipherTextGCM").value;
            var deriveKeyUsage = document.getElementById("deriveKeyUsage").value;

            if (!deriveKeyUsage) {
                alert("Generate ECDH Key First and perform Encrypttion");
                return;
            }
            obj = JSON.parse(deriveKeyUsage);
            alg1 = obj.alg;
            ext1 = obj.ext;
            k1 = obj.k;
            kty1 = obj.kty;

            crypto.subtle.importKey("jwk", {
                alg: alg1,
                ext: ext1,
                k: k1,
                kty: kty1
            }, "aes-cbc", false, ["decrypt"]).then(function (key) {
                return crypto.subtle.decrypt({
                    name: "aes-cbc",
                    iv,
                    //                    counter: iv,
                    //                    length: 128
                }, key, hexStringToUint8Array(plainText));
            }, failAndLog).then(function (cipherText) {
                console.log(" Plaintext", cipherText);
                
                alert(bytesToASCIIString(cipherText));
            }, failAndLog);
        }


        function bytesToASCIIString(bytes) {
            return String.fromCharCode.apply(null, new Uint8Array(bytes));
        }

        function bytesToHexString(bytes) {
            if (!bytes)
                return null;

            bytes = new Uint8Array(bytes);
            var hexBytes = [];

            for (var i = 0; i < bytes.length; ++i) {
                var byteString = bytes[i].toString(16);
                if (byteString.length < 2)
                    byteString = "0" + byteString;
                hexBytes.push(byteString);
            }

            return hexBytes.join("");
        };

        function hexStringToUint8Array(hexString) {
            if (hexString.length % 2 != 0)
                throw "Invalid hexString";
            var arrayBuffer = new Uint8Array(hexString.length / 2);

            for (var i = 0; i < hexString.length; i += 2) {
                var byteValue = parseInt(hexString.substr(i, 2), 16);
                if (byteValue == NaN)
                    throw "Invalid hexString";
                arrayBuffer[i / 2] = byteValue;
            }

            return arrayBuffer;
        }


        function failAndLog(error) {
            console.log(error);
            alert(error)
        }

        function getECPublicKey() {

            var challenge = new Uint8Array(32);
            window.crypto.getRandomValues(challenge);
            var challenge = new Uint8Array(32);
            var userID = 'Kosv9fPtkDoh4Oz7Yq/pVgWHS8HhdlCto5cR0aBoVMw='
            var id = Uint8Array.from(window.atob(userID), c => c.charCodeAt(0))

            var publicKey1 = {
                'challenge': challenge,

                'rp': {
                    'name': 'GoTrustID Inc.',
                },

                'user': {
                    'id': id,
                    'name': 'alice@example.com',
                    'displayName': 'Alice von Wunderland'
                },

                "authenticatorSelection": {
                    "userVerification": "discouraged",
                    "requireResidentKey": false,
                    "authenticatorAttachment": "cross-platform"

                },
                'attestation': "direct",
                'pubKeyCredParams': [{
                        'type': 'public-key',
                        'alg': -7
                    },
                    {
                        'type': 'public-key',
                        'alg': -257
                    }
                ]
            }
            console.log('List publicKey1', publicKey1);


            navigator.credentials.create({
                    'publicKey': publicKey1
                })
                .then((newCredentialInfo) => {

                    console.log('SUCCESS', newCredentialInfo)
                    console.log('ClientDataJSON: ', bufferToString(newCredentialInfo.response.clientDataJSON))
                    let attestationObject = CBOR.decode(newCredentialInfo.response.attestationObject);
                    console.log('AttestationObject: ', attestationObject);
                    let authData = parseAuthData(attestationObject.authData);
                    console.log('AuthData: ', authData);
                    console.log('CredID: ', bufToHex(authData.credID));
                    console.log('AAGUID: ', bufToHex(authData.aaguid));
                    console.log('PublicKey', CBOR.decode(authData.COSEPublicKey.buffer));
                    var publicKEy = CBOR.decode(authData.COSEPublicKey.buffer);

                    console.log('X point: ', bufToHex(Object.values(publicKEy)[3]));
                    console.log('Y point: ', bufToHex(Object.values(publicKEy)[4]));

                    bEx_ecX = Object.values(publicKEy)[3];
                    bEx_ecY = Object.values(publicKEy)[4];

                    document.getElementById("ecpublickey_x").value = bufToHex(Object.values(publicKEy)[3]);
                    document.getElementById("ecpublickey_y").value = bufToHex(Object.values(publicKEy)[4]);

                    alert('Test DONE!!!');
                })
        };


        function base64EncodeURL(byteArray) {
            return btoa(Array.from(new Uint8Array(byteArray)).map(val => {
                return String.fromCharCode(val);
            }).join('')).replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
        };



    </script>


</head>

<body>
    <div class="container" style="height: auto !important;"> </div>
    <div class="col-lg-8" style="height: auto !important; min-height: 0px !important;">
        <h1 class="mt-4">Test Idem Key Plus ON android</h1>
        <p></p>
        <hr>
        <h2 class="mt-4">Get EC public Key from Idem Key Plus</h2>
        <div>
            <br> ECDH Key public
            <p><button type="button" class="btn btn-primary" onclick="getECPublicKey()">Get ECKey </button></p>
            <p><input class="form-control" type="text" size="100" name="ecpublickey_x" id="ecpublickey_x"
                    readonly="true"> </p>
            <p> <input class="form-control" type="text" size="100" name="ecpublickey_y" id="ecpublickey_y"
                    readonly="true"></p>
        </div>
        <hr>
        <h2 class="mt-4">
            <a id="ECDH_Demo_17"></a>ECDH Demo</h2>
        <div> Named Curve
            <select class="form-control" name="curve" id="curve">
                <option value="P-256">P-256</option>
            </select>
            <p><button type="button" class="btn btn-primary" onclick="ECDH_DeriveKey_DeriveBits()">ECDH DeriveKey and
                    Derive Bits </button></p>
        </div>
        <div> ECDH External Public Key (JWK) :
            <textarea class="form-control" name="ecdhpublic" id="ecdhpublic" cols="10" rows="2"> </textarea>
            <br> ECDH local Private Key (JWK):
            <br><textarea class="form-control" name="ecdhprivate" id="ecdhprivate" cols="10" rows="2"></textarea>
            ECDH Derived Bits (Hex)
            <input class="form-control" type="text" size="100" name="cipherText" id="cipherText" readonly="true">
            <br> ECDH Derived Key Usage (JWK)
            <textarea class="form-control" name="deriveKeyUsage" id="deriveKeyUsage" cols="10" rows="2"> </textarea>

            <br> Idem Key Plus share KEY(= sha256(ECDH Derived Bits))
            <textarea class="form-control" name="pinKeyIdemPlus" id="pinKeyIdemPlus" cols="10" rows="2"> </textarea>

        </div>
        <div> Encrypt User PIN Using ECDH Derived Key (Master)
            <input class="form-control" type="text" name="plainText" value="88888888" id="plainText"> 
             SHA256
            <input class="form-control" type="text" name="sha256Text" id="sha256Text"> 
            LEFT(SHA256's value, 16)
            <input class="form-control" type="text" name="sha256Left16Text" id="sha256Left16Text"> 
            Output
            <input class="form-control" type="text" size="100" name="cipherTextGCM" id="cipherTextGCM">
            <br>
            <button type="button" class="btn btn-primary" onclick="ECDH_AES_CTR_Encrypt()">Encrypt ECDH-AES-CBC
            </button>
            <button type="button" class="btn btn-primary" onclick="ECDH_AES_CTR_Decrypt()">Decrypt ECDH-AES-CBC
            </button>
        </div>
        <hr>
    </div>

</html>