<!DOCTYPE html>
<!-- saved from url=(0086)https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/BasicDirectExample.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Basic Scenario with direct attestation Example</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Ensure use of most common Unicode characters -->
    
    <link rel="stylesheet" href="./BasicDirectExample_files/spectre.min.css">
    <!-- Considered an "experimental" feature -->
    <link rel="stylesheet" href="./BasicDirectExample_files/spectre-exp.min.css">
    <!-- Spectre.css icons are used -->
    <link rel="stylesheet" href="./BasicDirectExample_files/spectre-icons.min.css"> 
</head>
<body>
    <div class="container centered">
        <div class="columns" style="margin-left: 15%; margin-right: 15%; margin-top: 10%;">
            <div class="column col-2 text-center">
            </div>

            <div class="column col-4 text-center">
                <div class="card">
                    <h4>Register</h4>
                    <div class="card-body">
                        <form id="register" onsubmit="return false">
                            <input type="text" name="username" placeholder="Username"><br>
                            <input type="text" name="displayName" placeholder="DisplayName"><br>
                            <input type="password" name="password" placeholder="Password"><br>
                            <button class="btn btn-primary" action="submit">Register</button>
                        </form>
                    </div><!-- .card-body --> 
                </div><!-- .card -->
            </div>

             <div class="column col-4 text-center">
                <div class="card">
                    <h4>Login</h4>
                    <div class="card-body">
                        <form id="login" onsubmit="return false">
                            <input type="text" name="username" placeholder="Username"><br>
                            <input type="password" name="password" placeholder="Password"><br>
                            <input type="text" name="allowid" placeholder="Input "><br>
                            <button class="btn btn-primary" action="submit">Login</button>
                        </form>
                    </div><!-- .card-body --> 
                </div><!-- .card -->
            </div>

            <div class="column col-2 text-center">
            </div>
        </div>
    </div>

    <div>	
	<textarea style="width:100%;height:150px;" id="show-data">
	 
	</textarea>
    </div>	
    
    <script>
        document.getElementById('register').addEventListener('submit', function(event) {
            event.preventDefault();

            let username    = this.username.value;
            let password    = this.password.value;
            let displayName = this.displayName.value;
            //console.log('username', username);
           // console.log('displayName', displayName);
            
            registerPassword({username, password, displayName})
                .then((serverResponse) => {
                    if(serverResponse.status !== 'startFIDOEnrolment')
                        throw new Error('Error registering user! Server returned: ' + serverResponse.errorMessage);

                    return getMakeCredentialChallenge({'attestation': 'direct'})
                })
                .then((makeCredChallenge) => {
                    makeCredChallenge = preformatMakeCredReq(makeCredChallenge);
                   // console.log('makeCredChallenge', makeCredChallenge);
                    return navigator.credentials.create({ 'publicKey': makeCredChallenge })
                })
                .then((newCredentialInfo) => {
                
                   // console.log('SUCCESS', newCredentialInfo)
                   // console.log('ClientDataJSON: ', bufferToString(newCredentialInfo.response.clientDataJSON))
                    let attestationObject = CBOR.decode(newCredentialInfo.response.attestationObject);
                   // console.log('AttestationObject: ', attestationObject)
                    let authData = parseAuthData(attestationObject.authData);
                   // console.log('AuthData: ', authData);
                console.log('DATA: ', bufToHex(authData.credID));
                  //  console.log('AAGUID: ', bufToHex(authData.aaguid));
                  //  console.log('PublicKey', CBOR.decode(authData.COSEPublicKey.buffer));
                    newCredentialInfo = publicKeyCredentialToJSON(newCredentialInfo);
                    return makeCredentialResponse(newCredentialInfo)
                })
                .then((serverResponse) => {
                    if(serverResponse.status !== 'ok')
                        throw new Error('Error registering user! Server returned: ' + serverResponse.errorMessage);

                    alert('Success!');
                })
                .catch((error) => {
                    alert('FAIL' + error)
                    console.log('FAIL', error)
                })
        })

        document.getElementById('login').addEventListener('submit', function(event) {
            event.preventDefault();

            let username    = this.username.value;
            let password    = this.password.value;
            let allowid    = this.allowid.value;
            var challenge = new Uint8Array(32);
            window.crypto.getRandomValues(challenge);

            
            var check = 0;
            if(username =='PKI-id'){
                check = 1;
            }
            loginPassword({username, password})
                .then((serverResponse) => {
                    if(serverResponse.status !== 'startFIDOAuthentication')
                        throw new Error('Error logging in! Server returned: ' + serverResponse.errorMessage);

                    return getGetAssertionChallenge()
                })
                .then((getAssertionChallenge) => {
                    getAssertionChallenge = preformatGetAssertReq(getAssertionChallenge);
                    console.log("publick key",getAssertionChallenge);
                    if(check==1){
                       // console.log("Yes");
                       // console.log("allowCredentials",getAssertionChallenge.allowCredentials[0].id);
                        getAssertionChallenge.allowCredentials[0].id = Uint8Array.from(allowid, c=>c.charCodeAt(0));
                        //console.log("allowCredentials",getAssertionChallenge.allowCredentials[0].id);

                    }
                    return navigator.credentials.get({ 'publicKey': getAssertionChallenge })
                })
                .then((newCredentialInfo) => {
                    newCredentialInfo = publicKeyCredentialToJSON(newCredentialInfo)
                    console.log("Sign",newCredentialInfo.response.signature);
                    document.getElementById('show-data').value = "Data:"+"\n"+newCredentialInfo.response.signature+"\n";
                    //var sign = Uint8Array.from(window.atob(newCredentialInfo.response.signature), c=>c.charCodeAt(0))
                    //console.log('Sign: ', bufToHex(sign));
                    return getAssertionResponse(newCredentialInfo)
                })
                .then((serverResponse) => {
                    if(serverResponse.status !== 'ok')
                        throw new Error('Error registering user! Server returned: ' + serverResponse.errorMessage);

                    alert('Success!');
                })
                .catch((error) => {
                    alert('FAIL' + error)
                    console.log('FAIL', error)
                })
        })
    </script>
    <script src="./BasicDirectExample_files/base64url-arraybuffer.js"></script>
    <script src="./BasicDirectExample_files/cbor.js"></script>
    <script src="./BasicDirectExample_files/helpers.js"></script>
    <script src="./BasicDirectExample_files/server.sample.js"></script>

</body></html>
